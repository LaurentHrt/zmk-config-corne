/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        e_accent_aigu: e_accent_aigu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp E>;
            label = "E_ACCENT_AIGU";
        };

        e_accent_grave: e_accent_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(GRAVE) &kp E>;
            label = "E_ACCENT_GRAVE";
        };

        e_accent_circ: e_accent_circ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp E>;
            label = "E_ACCENT_CIRC";
        };

        a_accent_grave: a_accent_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(GRAVE) &kp A>;
            label = "A_ACCENT_GRAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB       &kp A    &kp Z  &kp E           &kp R    &kp T        &kp Y      &kp U          &kp I      &kp O      &kp P     &kp SINGLE_QUOTE
&kp ESCAPE    &lt 2 Q  &kp S  &lt 4 D         &lt 3 F  &kp G        &kp H      &kp J          &kp K      &kp L      &kp M     &kp BACKSPACE
&kp LEFT_ALT  &kp W    &kp X  &kp C           &kp V    &kp B        &kp N      &kp COMMA      &kp DOT    &kp SLASH  &kp SEMI  &kp MINUS
                              &kp LEFT_SHIFT  &mo 1    &kp SPACE    &kp ENTER  &kp RIGHT_GUI  &kp RCTRL
            >;
        };

        lower_layer {
            bindings = <
&trans      &a_accent_grave  &e_accent_grave  &e_accent_aigu  &e_accent_circ  &kp LS(LA(NUMBER_2))    &kp KP_PLUS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &none          &none       &kp ASTERISK
&kp ESCAPE  &kp EXCLAMATION  &kp AT           &kp HASH        &kp AMPERSAND   &kp PERCENT             &kp PIPE     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET      &kp DOLLAR  &kp GRAVE
&trans      &none            &none            &kp LA(C)       &none           &none                   &kp EQUAL    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH  &kp TILDE   &none
                                              &trans          &none           &trans                  &kp SPACE    &trans                &trans
            >;
        };

        raise_layer {
            bindings = <
&none  &none         &none         &none         &none         &none         &none           &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none       &none  &none
&none  &none         &none         &none         &none         &none         &kp C_PREVIOUS  &kp C_VOLUME_DOWN     &kp C_VOL_UP          &kp C_NEXT  &none  &none
&none  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR    &none           &kp C_PLAY_PAUSE      &kp C_MUTE            &none       &none  &none
                                   &none         &none         &trans        &trans          &none                 &none
            >;
        };

        number_layer {
            bindings = <
&none   &none  &none  &none   &none  &none     &kp PLUS   &kp N7        &kp N8        &kp N9        &kp ASTRK   &kp EQUAL
&none   &none  &none  &none   &none  &none     &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH   &kp BACKSPACE
&trans  &none  &none  &none   &none  &none     &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &kp COMMA
                      &trans  &none  &trans    &trans     &trans        &trans
            >;
        };

        arrow_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans     &trans  &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };
    };
};
